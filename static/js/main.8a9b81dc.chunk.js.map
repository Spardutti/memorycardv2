{"version":3,"sources":["Components/Header.jsx","Components/Images.jsx","Components/GetImages.js","Components/Images/broly1.png","Components/Images/broly2.png","Components/Images/buu1.png","Components/Images/buu2.png","Components/Images/buu3.png","Components/Images/cell1.png","Components/Images/cell2.png","Components/Images/freezer2.png","Components/Images/freezer3.png","Components/Images/gohan1.png","Components/Images/gohan2.png","Components/Images/goku1.png","Components/Images/goku2.png","Components/Images/goku3.png","Components/Images/piccolo1.png","Components/Images/piccolo2.png","Components/Images/vegeta1.png","Components/Images/vegeta2.png","Components/Winner.jsx","Components/Loser.jsx","App.jsx","index.js"],"names":["Header","props","className","score","bestScore","Images","shuffle","map","e","index","name","src","onClick","mixit","alt","images","Winner","id","playAgain","Loser","App","useState","imgArr","setScore","setBestScore","clickedImgArr","setClickedImgArr","displayImages","setDisplayImages","onMount","useRef","winner","setWinner","loser","setLoser","sort","Math","random","slice","useEffect","current","console","log","indexOf","target","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a9b81dc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = (props) => {\n  return (\n    <nav className=\"navContainer\">\n      <h1 className=\"title\">Memory Game</h1>\n      <p className=\"rules\">\n        Click each card only once! <br /> if you click the same <br/> \n        card twice you lose!\n      </p>\n      <p className=\"score\">Score: {props.score}</p>\n      <p className=\"bestScore\">Best Score: {props.bestScore}</p>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Images = (props) => {\n\n  return (\n    <div className=\"imageContainer\">\n      {props.shuffle.map((e, index) => {\n        return <img name={e} src={props.shuffle[index]} onClick={props.mixit} alt=\"\" />;\n      })}\n    </div>\n  );\n};\n\nexport default Images;\n","import broly1 from \"./Images/broly1.png\";\nimport broly2 from \"./Images/broly2.png\";\nimport buu1 from \"./Images/buu1.png\";\nimport buu2 from \"./Images/buu2.png\";\nimport buu3 from \"./Images/buu3.png\";\nimport cell1 from \"./Images/cell1.png\";\nimport cell2 from \"./Images/cell2.png\";\nimport freezer2 from \"./Images/freezer2.png\";\nimport freezer3 from \"./Images/freezer3.png\";\nimport gohan1 from \"./Images/gohan1.png\";\nimport gohan2 from \"./Images/gohan2.png\";\nimport goku1 from \"./Images/goku1.png\";\nimport goku2 from \"./Images/goku2.png\";\nimport goku3 from \"./Images/goku3.png\";\nimport piccolo1 from \"./Images/piccolo1.png\";\nimport piccolo2 from \"./Images/piccolo2.png\";\nimport vegeta1 from \"./Images/vegeta1.png\";\nimport vegeta2 from \"./Images/vegeta2.png\";\n\nconst images = [\n  broly1,\n  broly2,\n  buu1,\n  buu2,\n  buu3,\n  cell1,\n  cell2,\n  freezer2,\n  freezer3,\n  gohan1,\n  gohan2,\n  goku1,\n  goku2,\n  goku3,\n  piccolo1,\n  piccolo2,\n  vegeta1,\n  vegeta2,\n];\n\nexport default images;\n","export default __webpack_public_path__ + \"static/media/broly1.671c42b2.png\";","export default __webpack_public_path__ + \"static/media/broly2.8982ee28.png\";","export default __webpack_public_path__ + \"static/media/buu1.d0f2a8d7.png\";","export default __webpack_public_path__ + \"static/media/buu2.471140c8.png\";","export default __webpack_public_path__ + \"static/media/buu3.fa8dc3d4.png\";","export default __webpack_public_path__ + \"static/media/cell1.ea050640.png\";","export default __webpack_public_path__ + \"static/media/cell2.63513ede.png\";","export default __webpack_public_path__ + \"static/media/freezer2.2cc4d9b5.png\";","export default __webpack_public_path__ + \"static/media/freezer3.096d8b34.png\";","export default __webpack_public_path__ + \"static/media/gohan1.404c6547.png\";","export default __webpack_public_path__ + \"static/media/gohan2.8437d397.png\";","export default __webpack_public_path__ + \"static/media/goku1.021d7835.png\";","export default __webpack_public_path__ + \"static/media/goku2.cda06b86.png\";","export default __webpack_public_path__ + \"static/media/goku3.74f3df19.png\";","export default __webpack_public_path__ + \"static/media/piccolo1.fd8778f0.png\";","export default __webpack_public_path__ + \"static/media/piccolo2.7364beb5.png\";","export default __webpack_public_path__ + \"static/media/vegeta1.13164974.png\";","export default __webpack_public_path__ + \"static/media/vegeta2.f9537efd.png\";","import React from \"react\";\n\nconst Winner = (props) => {\n  return (\n    <div className=\"winnerScreen\">\n      <h1 id=\"winner\" className=\"winner\">\n        You Win!\n      </h1>\n      <p className=\"winnerMessage\">Congratulations!!</p>\n      <button onClick={props.playAgain}>Play Again!</button>\n    </div>\n  );\n};\n\nexport default Winner;\n","import React from \"react\";\n\nconst Loser = (props) => {\n  return (\n    <div className=\"winnerScreen\">\n      <h1 className=\"loser\">You Lose!</h1>\n      <p className=\"loserMessage\">You Best Score is: {props.bestScore}</p>\n      <button onClick={props.playAgain}>Try Again ?</button>\n    </div>\n  );\n};\n\nexport default Loser;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./style.css\";\nimport Header from \"./Components/Header\";\nimport Images from \"./Components/Images\";\nimport images from \"./Components/GetImages\";\nimport Winner from \"./Components/Winner\";\nimport Loser from \"./Components/Loser\"\n\nconst App = (props) => {\n  //initial order/state\n  const [imgArr, setImgArr] = useState(images);\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [clickedImgArr, setClickedImgArr] = useState([]);\n  const [displayImages, setDisplayImages] = useState(true);\n  const onMount = useRef(true);\n  const [winner, setWinner] = useState(false);\n  const [loser, setLoser] = useState(false);\n  //mix the array and select the first 12 elements to be displayed\n  let shuffle = imgArr.sort(() => 0.5 - Math.random()).slice(0, 12);\n\n  //---------------------------------\n\n  const clickedImage = (e) => {\n    //click and check if it was clicked previously\n    if (clickedImgArr.indexOf(e.target.name) === -1 && displayImages === true) {\n      setClickedImgArr((prevState) => [...prevState, e.target.name]);\n      //update score and bestScore\n      setScore(score + 1);\n      if (score >= bestScore) {\n        setBestScore(score + 1);\n      }\n    } else {\n      setLoser(true);\n      setDisplayImages(false);\n    }\n  };\n\n  useEffect(() => {\n    //set initial render\n    if (onMount.current) {\n      onMount.current = false;\n    }\n    //runs on updates\n    else {\n      //check winner\n      if (score === 12) {\n        setWinner(true);\n        setDisplayImages(false);\n      }\n    }\n  }, [clickedImgArr, loser]);\n\n  //restart the game but keeps the BestScore\n  const playAgain = () => {\n    console.log(\"GO\");\n    setWinner(false);\n    setLoser(false)\n    setDisplayImages(true);\n    setScore(0);\n    setClickedImgArr([]);\n  };\n\n  return (\n    <div>\n      {/*if(winner) display winner SCreen */}\n      {winner ? (\n        <div>\n          <Header score={score} bestScore={bestScore} />\n          <Winner playAgain={playAgain} />\n        </div>\n        /*if(loser) display loser screen */\n      ) : loser ? (\n        <div>\n          <Header score={score} bestScore={bestScore} />\n          <Loser playAgain={playAgain} bestScore={bestScore} />\n        </div>\n      ) : \n      /* else display the main game loop*/(\n        <div>\n          <Header score={score} bestScore={bestScore} />\n          <Images\n            shuffle={shuffle}\n            mixit={displayImages ? clickedImage : null}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}